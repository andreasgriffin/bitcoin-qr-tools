import bdkpython as bdk

from bitcoin_qr_tools.data import Data, DataType, serialized_to_hex
from bitcoin_qr_tools.unified_decoder import UnifiedDecoder


def test_qqbr_generator():

    # test tx
    s = "020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff0502ad000101ffffffff0200f9029500000000160014b947c0de955cd2ccdfcd5b33198d2656834d0cd50000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000"
    data = Data.from_str(s, network=bdk.Network.REGTEST)

    fragments = data.generate_fragments_for_qr(qr_type="bbqr")
    assert fragments == [
        "B$ZT0100MNRAAASGIYDAFYB7CCYDFLIFVICLDGAYPYZE2BIJRMYYR3DUH5YG62WMUUZ7PT2GDNF7NKUFGX57EXEF5FJMWUSZUW4PF3NDN4ZPNBIX5763KXZZ6P7OFTHA2KMEZNWOZKMUSW52L7PTBG7O27ZZGUMBSD2SAAAA"
    ]

    # read it back in
    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    for part in fragments:
        meta_data_handler.add(part)
    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()
    assert data.data_type == DataType.Tx
    assert serialized_to_hex(data.data.serialize()) == s

    # test psbt
    s = "cHNidP8BAMkCAAAAAw0LFe2nYZVhWGRFccsyZ1kWzineRsUq2xM/gJAqfHvYAAAAAAD/////T3KwcSU2a3qn8J9opvAs61NbbruFTmebo4ZCgIJ/sukAAAAAAP////939XUhgWBqk1icrzcEAFQmsv6hKPx9tlzuQi23gby5FwAAAAAA/////wKMz/AIAAAAABl2qRTsAZMBxEueuw2aJIjg8T6WUlNfLIisjM/wCAAAAAAZdqkU2HPa6z2Y7ajbpVoE6X4P6H4wpZiIrAAAAAAAAQBVAgAAAAGt3gAAAAAAAO++AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEkAAAAA/////wEA4fUFAAAAABl2qRQLJTen1vPMZoyen6AwP/s8rW6bgYisAAAAACIGAyvjcoAdhGDdpSrheKrXdKVIALpW+UnJe4ovUeKZIJ0GDA8FaUMAAAAAAAAAAAABAFUCAAAAAa3eAAAAAAAA774AAAAAAAAAAAAAAAAAAAAAAAAAAAAASQAAAAD/////AQDh9QUAAAAAGXapFIKLdGycxuL7uJOU9U/0Dv/SpLZRiKwAAAAAIgYC2SKQO46ylbsjL8AwTYjPF1WmAXkVb6j4SXDw1ActX7sMDwVpQwAAAAABAAAAAAEAVQIAAAABrd4AAAAAAADvvgAAAAAAAAAAAAAAAAAAAAAAAAAAAABJAAAAAP////8BAOH1BQAAAAAZdqkUEYjZdEwP6Oj67HctDEgb+BQA+QmIrAAAAAAiBgIftCPUJRLknXWp0nQVBHp0N4JDz3ruB8G2m6faCgPUKAwPBWlDAAAAAAIAAAAAACICAvLUgjZaHo6bv8yDAUEEjplJ+O+66bnba7+r2FSYtfZHEA8FaUMMAAAAIgAAAGADAAAA"
    data = Data.from_str(s, network=bdk.Network.REGTEST)

    fragments = data.generate_fragments_for_qr(qr_type="bbqr", max_qr_size=100)

    # read it back in
    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    for part in fragments:
        meta_data_handler.add(part)
    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()
    assert data.data_type == DataType.PSBT
    assert data.data.serialize() == s

    assert fragments == [

    ]

    # test unicode / descriptor
    s = "wpkh([a42c6dd3]tpubDDnGNapGEY6AZAdQbfRJgMg9fvz8pUBrLwvyvUqEgcUfgzM6zc2eVK4vY9x9L5FJWdX8WumXuLEDV5zDZnTfbn87vLe9XceCFwTu9so9Kks/0/*)#h6kd9udr"
    data = Data.from_str(s, network=bdk.Network.REGTEST)

    fragments = data.generate_fragments_for_qr(qr_type="bbqr")

    # read it back in
    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    for part in fragments:
        meta_data_handler.add(part)
    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()
    assert data.data_type == DataType.Descriptor
    assert data.data_as_string() == s


def test_qqbr_reader():

    # test psbt
    parts = [
        "B$ZP0100FMUE4KXZZ7EHBEUJQGAYDGMXLP2O34WEVGERCKNOQWTY3URDYXHGTXTTHOVHKW6YXZQYEVSN6UGQMEHYB4CP4RI3BJK43MVLSZ7ZRH5R5SB4527A5C6N3LL65GZRPNZZGU2NK332BFLVR7VVKSYTCILLOLCJZ5PGFQGCC2U37YW5J6CTXMW6NHMT533MMPJ3YXQQVGL2ZZ76AADRETFVNCV4MGOMY6GEPPPG5XSZFIOQ6PW2JUFQVDWX5FMIHLHCI3Y23V5WGPPK5OF5GSFOKZI576FTVA5FGM5NNACNMNSAQBLZQZY62PJQS7Q72PQGVTABGZRVEPB4HL5MGCB3SVONS5P7W7BGVVT557AFA33L63OW43GW5BAYVTCMNLH5XCUEDNRF4HXFFLMHCWV25FZM6VQNQFPW2PZWI5MXP3QKHGIKOPMXR6CZGOO6CFSQ42IKN3USTQ44OHX53YYXTSSX74XXZ7ZPFXMRMCDTBDJU3JIJ2Z6ZXJXOK3LD6YHA3NYV4PDUDFR2K2H6RIPZ4BI7V2YOXRXPQY5YJELSQ4EHNXBM6HQX74PC26NXEXI6B7UR6IQMH446CDUR36RHYRKV5DE5ZUUVS5FEIWNKJLGJXHGPK66WGP5YNX3PEW24ZRLTJYAOMEBNXIGEYT2OSSUTLGKFZX7M7VTZUGI5LH5GM6X6PC76XZOO3PM7WV67BCM3D5M3XMAEQBYPJAWRAJZQAMEQA",
    ]
    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    for part in parts:
        meta_data_handler.add(part)
    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()
    assert data.data_type == DataType.PSBT
    assert (
        data.data.serialize()
        == "cHNidP8BAMkCAAAAAw0LFe2nYZVhWGRFccsyZ1kWzineRsUq2xM/gJAqfHvYAAAAAAD/////T3KwcSU2a3qn8J9opvAs61NbbruFTmebo4ZCgIJ/sukAAAAAAP////939XUhgWBqk1icrzcEAFQmsv6hKPx9tlzuQi23gby5FwAAAAAA/////wKMz/AIAAAAABl2qRTsAZMBxEueuw2aJIjg8T6WUlNfLIisjM/wCAAAAAAZdqkU2HPa6z2Y7ajbpVoE6X4P6H4wpZiIrAAAAAAAAQBVAgAAAAGt3gAAAAAAAO++AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEkAAAAA/////wEA4fUFAAAAABl2qRQLJTen1vPMZoyen6AwP/s8rW6bgYisAAAAACIGAyvjcoAdhGDdpSrheKrXdKVIALpW+UnJe4ovUeKZIJ0GDA8FaUMAAAAAAAAAAAABAFUCAAAAAa3eAAAAAAAA774AAAAAAAAAAAAAAAAAAAAAAAAAAAAASQAAAAD/////AQDh9QUAAAAAGXapFIKLdGycxuL7uJOU9U/0Dv/SpLZRiKwAAAAAIgYC2SKQO46ylbsjL8AwTYjPF1WmAXkVb6j4SXDw1ActX7sMDwVpQwAAAAABAAAAAAEAVQIAAAABrd4AAAAAAADvvgAAAAAAAAAAAAAAAAAAAAAAAAAAAABJAAAAAP////8BAOH1BQAAAAAZdqkUEYjZdEwP6Oj67HctDEgb+BQA+QmIrAAAAAAiBgIftCPUJRLknXWp0nQVBHp0N4JDz3ruB8G2m6faCgPUKAwPBWlDAAAAAAIAAAAAACICAvLUgjZaHo6bv8yDAUEEjplJ+O+66bnba7+r2FSYtfZHEA8FaUMMAAAAIgAAAGADAAAA"
    )

    # test tx
    parts = [
        "B$2T0100AIAAAAAAAEAX7DVMHZVXCRIUWGBUWBLHLQTDMBXRGD6XD6VNW2YS4G3F4PYPCYABAAAAAAH577776AWOFYNB4AIAAAACEUJAAF4JKSHX773PGWYLAIHCTL5XSQ53ZVUSI4BSU7BJZMTXRLBUEK4ABYPVAUAAAAAAEIACA6SWO2DUCXBJ6DQ4FYOR4DV7VTMRPDUBF7JTTAECLXKF7WLHQ3FVAJDTARACEBI44NM4PUPA2K6SXKWQ6ZPDOYNTR6BMFLA6ZKZ2LY4PWYZZA4XEIARAFY4RINBTMPTRZSPVKAVPUAD4YU5CJV223YE5XV6K4AW6I6HJMXYACIIDQ6MREPZFK24WLVHLRH7BB5RDEI52PSOATBDOQXOPRU6EH62UAXTHMAAAAA",
    ]
    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    for part in parts:
        meta_data_handler.add(part)
    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()
    assert data.data_type == DataType.Tx
    assert (
        serialized_to_hex(data.data.serialize())
        == "020000000001017f8eac3e6b714514b1834b05675c263606f130fd71faadb6b12e1b65e3f0f1600100000000fdffffff02ce2e1a1e0100000022512001789548f7fff6f35b0b020e29afb7943bbcd69247032a7c29cb2778ac3422b800e1f505000000002200207a567687415c29f0e1c2e1d1e0ebfacd9178e812fd33980825dd45fd96786cb502473044022051ce359c7d1e0d2bd2baad0f65e3761b38f82c2ac1ecab3a5e38fb6339072e4402202e3914343363e71cc9f5502afa007cc53a24d75ade09dbd7cae02de478e965f00121038799123f2556b965d4eb89fe10f623223ba7c9c09846e85dcf8d3c43fb5405e676000000"
    )

    # test descriptor
    parts = [


    ]
    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    for part in parts:
        meta_data_handler.add(part)
    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()
    assert data.data_type == DataType.Descriptor
    assert (
        data.data.as_string_private()
        == """wsh(sortedmulti(15,[0f056943/48'/1'/0'/2']tpubDF2rnouQaaYrXF4noGTv6rQYmx87cQ4GrUdhpvXkhtChwQPbdGTi8GA88NUaSrwZBwNsTkC9bFkkC8vDyGBVVAQTZ2AS6gs68RQXtXcCvkP/0/*,[0f182527/44'/1'/0']tpubDDPiPkMoKUosmkcSDxRM4TqguGJ5NfAAcFjcbNUEXTrXakPkA1aeNJ9wL1ezwJWmB3xzfWUKcVgGqMN7D1q2pEzyYk7PgArRTub9YkNCRSG/0/*,[5a56ac45/44'/1'/0']tpubDC83GmwP7h9R7LkH9APnrs7pFn1Vrx4n85m8En5BKadNgAGAy2BJ9Hze7HuD64RNJURtnaa63a1rcu8QHTiYR7bV8if3iHQsdho5oVkoWTD/0/*,[d8503df9/44'/1'/0']tpubDC7HwXCdCVDMDN9ypBChXjHABNGWEm7wRRLnS976bqwfiKZcTQ8F7RVSp46qHMpyAQJnZ6krbikPhR3WjK3xz9aZu4MWGzjnXcUA45snahN/0/*,[3888fcec/44'/1'/0']tpubDCWANsAexJQjgjmmb1BjYe8dEL5GRzBRhcZteeps9wgaQFPf5LpN3JzvhsQpKNe8SEQCvoCbRosffD734BmoXRp9oU1DNx4L5uMStQfzCwP/0/*,[703297d8/44'/1'/0']tpubDDXKYsJeT7jxHZBr7SJRwZvrJTpHEqfPtaTTMVBFEHovPGiXWRGE1EW3zxFmiav4NFw18urFBtNGBRdUdoeNVRcAQrFyztgKnfBGgrzLcyH/0/*,[8dbf3e35/44'/1'/0']tpubDDDMYFmFRhNMGsBSRHySVhRigA6mpdLQen6nKCGo5gYzdffi5vXh7fyPQcMq6JC9s3935E8oeoDK9nmfhAs88dSv2SErxzC7AnU5jEGhgMg/0/*,[85f23702/44'/1'/0']tpubDC5ep4x6yamTpiu9S54YGWzbk3RRY9Jo9gmFzg1TnHCckANoSxgfTQ7SUX7oBAzn5XKbFj6CWZsXqLBMAjMJf45xt6JxYEEHaByFECAgFhQ/0/*,[8c4b6189/44'/1'/0']tpubDCkpiTndQxLhXbmd6DSBRWwoepMHZ3TEn5mXCAcGvywgzeb8pw685eAYXmw6yrQCWrC21qc99PhvmM3QuzLEkQhDwUC4pEDs6A8CpxBJ2Wz/0/*,[63c6e4b4/44'/1'/0']tpubDDfvRTquS1sX9ZQAukiNqLYn8k2LsSJQ96b9MkZCdhrCG7YxLkPikdF5R1T3oz5cymThPJ5RvVfAdciQjiXeaEvFA2qSTXPAz3sJ5fZH8fb/0/*,[dacf9552/44'/1'/0']tpubDDT7e2vtsiSgJzZx1voMrYZFiZT3tVk8tapHsESt1RWKC6RjGXHzGXdr8Ktf9qaBTizFWuxx9J7wvkQL7YaFTmSuRrfcmYepiFthhJPipfq/0/*,[86d07c87/44'/1'/0']tpubDCLqrR5vdsWnibeG1Vj2SxbnCTYty23otbuaNqVtHWVp8LhPMbeUhjv9iLwPyCQnVKehjLMQdQQmCi48WRC4t5Bj5j9wSWDS7qDsZTrdvdp/0/*,[3b8be5f8/44'/1'/0']tpubDDeWGiNpmqRjtYKD1M4x8QJwm6fRsu1rVXoGN58HByEHvgVj6MSveKxNeEuqt2ydV5qXKqSMgMXz6DeBcrzkuryw7RZjCSXMAjZwNoputE8/0/*,[0526fc42/44'/1'/0']tpubDDRewg5FetNthbTeoMUa98iyF5Rseaz81MAA4A8q3wckKYXZbsqraDxooL5bDt8PXcW5uiV2N2XBQXPh9rRcXh3K2XtuRobKLcoeLtp9jLJ/0/*,[d3717778/44'/1'/0']tpubDCgky7CjqAwQwa8Bucg8w85D4PagABdMD8drLz4TuZtEG7sycV9XWvTN2SMGc3GcgMyBeBmhUqzjKF4uM9rQ3TJ4iP5jhyFRZeJY9CE8KqW/0/*))#hju38n66"""
    )
