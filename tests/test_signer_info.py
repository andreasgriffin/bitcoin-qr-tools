import bdkpython as bdk
import pytest

from bitcoin_qr_tools.data import (
    Data,
    DataType,
    DecodingException,
    SignerInfo,
    WrongNetwork,
)
from bitcoin_qr_tools.unified_decoder import UnifiedDecoder


def test_SignerInfo():

    # test SignerInfo
    s = "[a42c6dd3/84'/1'/0']tpubDDnGNapGEY6AZAdQbfRJgMg9fvz8pUBrLwvyvUqEgcUfgzM6zc2eVK4vY9x9L5FJWdX8WumXuLEDV5zDZnTfbn87vLe9XceCFwTu9so9Kks"
    data = Data.from_str(s, network=bdk.Network.REGTEST)
    assert data.data_type == DataType.SignerInfo
    assert data.data == SignerInfo(
        **{
            "xpub": "tpubDDnGNapGEY6AZAdQbfRJgMg9fvz8pUBrLwvyvUqEgcUfgzM6zc2eVK4vY9x9L5FJWdX8WumXuLEDV5zDZnTfbn87vLe9XceCFwTu9so9Kks",
            "fingerprint": "a42c6dd3",
            "key_origin": "m/84h/1h/0h",
        }
    )

    # test SignerInfo with h instead of '
    s = "[a42c6dd3/84h/1h/0h]tpubDDnGNapGEY6AZAdQbfRJgMg9fvz8pUBrLwvyvUqEgcUfgzM6zc2eVK4vY9x9L5FJWdX8WumXuLEDV5zDZnTfbn87vLe9XceCFwTu9so9Kks"
    data = Data.from_str(s, network=bdk.Network.REGTEST)
    assert data.data_type == DataType.SignerInfo
    assert data.data == SignerInfo(
        **{
            "xpub": "tpubDDnGNapGEY6AZAdQbfRJgMg9fvz8pUBrLwvyvUqEgcUfgzM6zc2eVK4vY9x9L5FJWdX8WumXuLEDV5zDZnTfbn87vLe9XceCFwTu9so9Kks",
            "fingerprint": "a42c6dd3",
            "key_origin": "m/84h/1h/0h",
        }
    )

    # test SignerInfo with derivation_path
    s = "[a42c6dd3/84'/1'/0']tpubDDnGNapGEY6AZAdQbfRJgMg9fvz8pUBrLwvyvUqEgcUfgzM6zc2eVK4vY9x9L5FJWdX8WumXuLEDV5zDZnTfbn87vLe9XceCFwTu9so9Kks/0/*"
    data = Data.from_str(s, network=bdk.Network.REGTEST)
    assert data.data_type == DataType.SignerInfo
    assert data.data == SignerInfo(
        **{
            "xpub": "tpubDDnGNapGEY6AZAdQbfRJgMg9fvz8pUBrLwvyvUqEgcUfgzM6zc2eVK4vY9x9L5FJWdX8WumXuLEDV5zDZnTfbn87vLe9XceCFwTu9so9Kks",
            "fingerprint": "a42c6dd3",
            "key_origin": "m/84h/1h/0h",
            "derivation_path": "/0/*",
        }
    )

    # test slip132
    s = "[7cf42c8e/84h/1h/0h]vpub5ZfBcsqfiq4GvTyyYpJW13W9KyZTT1TXNd4bvVk8TZ5ShYh2Bjfm5PyVhcSoLwAr23iRUvYtpza8wmCKPYu8ECKyZPAfwDaFniMjpzACeqJ"
    data = Data.from_str(s, network=bdk.Network.REGTEST)
    assert data.data_type == DataType.SignerInfo
    assert data.data == SignerInfo(
        **{
            "xpub": "tpubDDhLkT1BjU6gtrZ4firqd92X12x1KdwakUhLqqb3ZUb6Z2zBmGqyTxxbz4SksFRvdEUwbTFtHR7HQWv4DoaPi79UMfJpnZsTv85SNCfeePi",
            "fingerprint": "7cf42c8e",
            "key_origin": "m/84h/1h/0h",
        }
    )

    # test slip132 multisig (the xpub is at a different derivation path)
    s = "[7cf42c8e/48h/1h/0h/2h]Vpub5kwQ4Q4rGphWbu7SwK9TkPwgPkTKykZZLL22mavN7y9uH7gmQB8doAfx6sJrCtfam33p4vYUrZRdzYp8Ky5ogHB6ioUFA6XFCzM2wkeko6v"
    data = Data.from_str(s, network=bdk.Network.REGTEST)
    assert data.data_type == DataType.SignerInfo
    assert data.data.__dict__ == {
        "xpub": "tpubDE5U4jVviWBZ9iXA7ZEpYR8FM1oce2N2Pv16mfVjr7q9WRR2DJva6co8acMLAmhm8kkMJsFMRmaHL8v6rzc81hsvgcVzc3MTSfnrtwYZMMy",
        "fingerprint": "7cf42c8e",
        "key_origin": "m/48h/1h/0h/2h",
        "derivation_path": None,
        "first_address": None,
        "name": None,
    }

    assert data.data == SignerInfo(
        **{
            "xpub": "tpubDE5U4jVviWBZ9iXA7ZEpYR8FM1oce2N2Pv16mfVjr7q9WRR2DJva6co8acMLAmhm8kkMJsFMRmaHL8v6rzc81hsvgcVzc3MTSfnrtwYZMMy",
            "fingerprint": "7cf42c8e",
            "key_origin": "m/48'/1'/0'/2'",
        }
    )

    # cobo
    s = """{"xfp":"7cf42c8e","xpub":"tpubDE5U4jVviWBZ9iXA7ZEpYR8FM1oce2N2Pv16mfVjr7q9WRR2DJva6co8acMLAmhm8kkMJsFMRmaHL8v6rzc81hsvgcVzc3MTSfnrtwYZMMy","path":"m\/48'\/0'\/0'\/2'"}"""
    data = Data.from_str(s, network=bdk.Network.REGTEST)
    assert data.data_type == DataType.SignerInfo
    assert data.data == SignerInfo(
        **{
            "fingerprint": "7cf42c8e",
            "key_origin": "m/48'/0'/0'/2'",
            "xpub": "tpubDE5U4jVviWBZ9iXA7ZEpYR8FM1oce2N2Pv16mfVjr7q9WRR2DJva6co8acMLAmhm8kkMJsFMRmaHL8v6rzc81hsvgcVzc3MTSfnrtwYZMMy",
        }
    )
    assert data.data.__dict__ == {
        "fingerprint": "7cf42c8e",
        "key_origin": "m/48h/0h/0h/2h",
        "xpub": "tpubDE5U4jVviWBZ9iXA7ZEpYR8FM1oce2N2Pv16mfVjr7q9WRR2DJva6co8acMLAmhm8kkMJsFMRmaHL8v6rzc81hsvgcVzc3MTSfnrtwYZMMy",
        "derivation_path": None,
        "name": None,
        "first_address": None,
    }


def test_signer_infos():
    # this is the  sparrow export  format of coldcard
    parts = [
        """{
        "chain": "XRT",
        "xfp": "0F056943",
        "account": 0,
        "xpub": "tpubD6NzVbkrYhZ4XzL5Dhayo67Gorv1YMS7j8pRUvVMd5odC2LBPLAygka9p7748JtSq82FNGPppFEz5xxZUdasBRCqJqXvUHq6xpnsMcYJzeh",
        "bip44": {
            "name": "p2pkh",
            "xfp": "92B53FD2",
            "deriv": "m/44'/1'/0'",
            "xpub": "tpubDCiHGUNYdRRBPNYm7CqeeLwPWfeb2ZT2rPsk4aEW3eUoJM93jbBa7hPpB1T9YKtigmjpxHrB1522kSsTxGm9V6cqKqrp1EDaYaeJZqcirYB",
            "desc": "pkh([0f056943/44h/1h/0h]tpubDCiHGUNYdRRBPNYm7CqeeLwPWfeb2ZT2rPsk4aEW3eUoJM93jbBa7hPpB1T9YKtigmjpxHrB1522kSsTxGm9V6cqKqrp1EDaYaeJZqcirYB/<0;1>/*)#gx9efxnj",
            "first": "mtHSVByP9EYZmB26jASDdPVm19gvpecb5R"
        },
        "bip49": {
            "name": "p2sh-p2wpkh",
            "xfp": "FD3E8548",
            "deriv": "m/49'/1'/0'",
            "xpub": "tpubDCDqt7XXvhAYY9HSwrCXB7BXqYM4RXB8WFtKgtTXGa6u3U6EV1NJJRFTcuTRyhSY5Vreg1LP8aPdyiAPQGrDJLikkHoc7VQg6DA9NtUxHtj",
            "desc": "sh(wpkh([0f056943/49h/1h/0h]tpubDCDqt7XXvhAYY9HSwrCXB7BXqYM4RXB8WFtKgtTXGa6u3U6EV1NJJRFTcuTRyhSY5Vreg1LP8aPdyiAPQGrDJLikkHoc7VQg6DA9NtUxHtj/<0;1>/*))#7trzzmgc",
            "_pub": "upub5DMRSsh6mNaeiTXEzarZLvZezWp4cGhaDHjMz9iineDN8syqep2XHncDKFVtTUXY4fyKp12qDVVwdfq5rKkw2CDf5fy2gEHyh5NoTC6fiwm",
            "first": "2NCAJ5wD4GvmW32GFLVybKPNphNU8UYoEJv"
        },
        "bip84": {
            "name": "p2wpkh",
            "xfp": "AB82D43E",
            "deriv": "m/84'/1'/0'",
            "xpub": "tpubDC7jGaaSE66Pn4dgtbAAstde4bCyhSUs4r3P8WhMVvPByvcRrzrwqSvpF9Ghx83Z1LfVugGRrSBko5UEKELCz9HoMv5qKmGq3fqnnbS5E9r",
            "desc": "wpkh([0f056943/84h/1h/0h]tpubDC7jGaaSE66Pn4dgtbAAstde4bCyhSUs4r3P8WhMVvPByvcRrzrwqSvpF9Ghx83Z1LfVugGRrSBko5UEKELCz9HoMv5qKmGq3fqnnbS5E9r/<0;1>/*)#sjuyyvve",
            "_pub": "vpub5Y5a91QvDT3yog4bmgbqFo7GPXpRpozogzQeDArSPzsY8SKGHTgjSswhxhGkRonUQ9tyo9ZSQ1ecLKkVUyewWEUJZdwgUQycvG86FV7sdhZ",
            "first": "bcrt1qupyd58ndsh7lut0et0vtrq432jvu9jtdx8fgyv"
        },
        "bip48_1": {
            "name": "p2sh-p2wsh",
            "xfp": "43BD4CE2",
            "deriv": "m/48'/1'/0'/1'",
            "xpub": "tpubDF2rnouQaaYrUEy2JM1YD3RFzew4onawGM4X2Re67gguTf5CbHonBRiFGe3Xjz7DK88dxBFGf2i7K1hef3PM4cFKyUjcbJXddaY9F5tJBoP",
            "desc": "sh(wsh(sortedmulti(M,[0f056943/48'/1'/0'/1']tpubDF2rnouQaaYrUEy2JM1YD3RFzew4onawGM4X2Re67gguTf5CbHonBRiFGe3Xjz7DK88dxBFGf2i7K1hef3PM4cFKyUjcbJXddaY9F5tJBoP/0/*,...)))",
            "_pub": "Upub5T4XUooQzDXL58NCHk8ZCw9BsRSLCtnyHeZEExAq1XdnBFXiXVrHFuvvmh3TnCR7XmKHxkwqdACv68z7QKT1vwru9L1SZSsw8B2fuBvtSa6"
        },
        "bip48_2": {
            "name": "p2wsh",
            "xfp": "B5EE2F16",
            "deriv": "m/48'/1'/0'/2'",
            "xpub": "tpubDF2rnouQaaYrXF4noGTv6rQYmx87cQ4GrUdhpvXkhtChwQPbdGTi8GA88NUaSrwZBwNsTkC9bFkkC8vDyGBVVAQTZ2AS6gs68RQXtXcCvkP",
            "desc": "wsh(sortedmulti(M,[0f056943/48'/1'/0'/2']tpubDF2rnouQaaYrXF4noGTv6rQYmx87cQ4GrUdhpvXkhtChwQPbdGTi8GA88NUaSrwZBwNsTkC9bFkkC8vDyGBVVAQTZ2AS6gs68RQXtXcCvkP/0/*,...))",
            "_pub": "Vpub5mtnnUUL8u4oyRf5d2NZJqDypgmpx8FontedpqxNyjXTi6fLp8fmpp2wedS6UyuNpDgLDoVH23c6rYpFSEfB9jhdbD8gek2stjxhwJeE1Eq"
        },
        "bip45": {
            "name": "p2sh",
            "xfp": "9222584E",
            "deriv": "m/45'",
            "xpub": "tpubD8NXmKsmWp3a3DXhbihAYbYLGaRNVdTnr6JoSxxfXYQcmwVtW2hv8QoDwng6JtEonmJoL3cNEwfd2cLXMpGezwZ2vL2dQ7259bueNKj9C8n",
            "desc": "sh(sortedmulti(M,[0f056943/45']tpubD8NXmKsmWp3a3DXhbihAYbYLGaRNVdTnr6JoSxxfXYQcmwVtW2hv8QoDwng6JtEonmJoL3cNEwfd2cLXMpGezwZ2vL2dQ7259bueNKj9C8n/0/*,...))"
        }
    }"""
    ]

    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    for part in parts:
        meta_data_handler.add(part)
    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()
    assert data.data_type == DataType.SignerInfos, "Wrong type"
    # bdk returns '  instead of h  (which sparrrow does), so the checksum is different
    assert (
        data.data_as_string()
        == '{"chain": "XRT", "xfp": "0F056943", "p2pkh": {"xpub": "tpubDCiHGUNYdRRBPNYm7CqeeLwPWfeb2ZT2rPsk4aEW3eUoJM93jbBa7hPpB1T9YKtigmjpxHrB1522kSsTxGm9V6cqKqrp1EDaYaeJZqcirYB", "deriv": "m/44h/1h/0h", "first": "mtHSVByP9EYZmB26jASDdPVm19gvpecb5R", "name": "p2pkh"}, "p2sh-p2wpkh": {"xpub": "tpubDCDqt7XXvhAYY9HSwrCXB7BXqYM4RXB8WFtKgtTXGa6u3U6EV1NJJRFTcuTRyhSY5Vreg1LP8aPdyiAPQGrDJLikkHoc7VQg6DA9NtUxHtj", "deriv": "m/49h/1h/0h", "first": "2NCAJ5wD4GvmW32GFLVybKPNphNU8UYoEJv", "name": "p2sh-p2wpkh"}, "p2wpkh": {"xpub": "tpubDC7jGaaSE66Pn4dgtbAAstde4bCyhSUs4r3P8WhMVvPByvcRrzrwqSvpF9Ghx83Z1LfVugGRrSBko5UEKELCz9HoMv5qKmGq3fqnnbS5E9r", "deriv": "m/84h/1h/0h", "first": "bcrt1qupyd58ndsh7lut0et0vtrq432jvu9jtdx8fgyv", "name": "p2wpkh"}, "p2sh-p2wsh": {"xpub": "tpubDF2rnouQaaYrUEy2JM1YD3RFzew4onawGM4X2Re67gguTf5CbHonBRiFGe3Xjz7DK88dxBFGf2i7K1hef3PM4cFKyUjcbJXddaY9F5tJBoP", "deriv": "m/48h/1h/0h/1h", "first": null, "name": "p2sh-p2wsh"}, "p2wsh": {"xpub": "tpubDF2rnouQaaYrXF4noGTv6rQYmx87cQ4GrUdhpvXkhtChwQPbdGTi8GA88NUaSrwZBwNsTkC9bFkkC8vDyGBVVAQTZ2AS6gs68RQXtXcCvkP", "deriv": "m/48h/1h/0h/2h", "first": null, "name": "p2wsh"}, "p2sh": {"xpub": "tpubD8NXmKsmWp3a3DXhbihAYbYLGaRNVdTnr6JoSxxfXYQcmwVtW2hv8QoDwng6JtEonmJoL3cNEwfd2cLXMpGezwZ2vL2dQ7259bueNKj9C8n", "deriv": "m/45h", "first": null, "name": "p2sh"}}'
    )


def test_wrong_network_SignerInfos():
    # 2 different descriptors (both valid) in 2 lines  (coldcard style)    should trough error
    parts = [
        """{
        "chain": "BTC",
        "xfp": "0F056943",
        "account": 0,
        "xpub": "tpubD6NzVbkrYhZ4XzL5Dhayo67Gorv1YMS7j8pRUvVMd5odC2LBPLAygka9p7748JtSq82FNGPppFEz5xxZUdasBRCqJqXvUHq6xpnsMcYJzeh"
    }"""
    ]
    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    exceptionwas_raised = False
    try:
        for part in parts:
            meta_data_handler.add(part)
        assert meta_data_handler.is_complete()
        meta_data_handler.get_complete_data()
    except WrongNetwork:
        exceptionwas_raised = True
    assert exceptionwas_raised


def test_wrong_json_SignerInfos():
    # 2 different descriptors (both valid) in 2 lines  (coldcard style)    should trough error
    parts = [
        """{
        "chain": "BTC",
        "xfp": "0F056943",
        "account": 0,
        "xpub": "tpubD6NzVbkrYhZ4XzL5Dhayo67Gorv1YMS7j8pRUvVMd5odC2LBPLAygka9p7748JtSq82FNGPppFEz5xxZUdasBRCqJqXvUHq6xpnsMcYJzeh",
    }"""
    ]
    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    exceptionwas_raised = False
    try:
        for part in parts:
            meta_data_handler.add(part)
        assert meta_data_handler.is_complete()
        meta_data_handler.get_complete_data()
    except DecodingException:
        exceptionwas_raised = True
    assert exceptionwas_raised


def test_multisig_signer_infos_coldcard_qr():
    parts = [
        '{\n  "p2sh_deriv": "m/45h",\n  "p2sh": "tpubD8NXmKsmWp3a3DXhbihAYbYLGaRNVdTnr6JoSxxfXYQcmwVtW2hv8QoDwng6JtEonmJoL3cNEwfd2cLXMpGezwZ2vL2dQ7259bueNKj9C8n",\n  "p2sh_desc": "sh(sortedmulti(M,[0F056943/45h]tpubD8NXmKsmWp3a3DXhbihAYbYLGaRNVdTnr6JoSxxfXYQcmwVtW2hv8QoDwng6JtEonmJoL3cNEwfd2cLXMpGezwZ2vL2dQ7259bueNKj9C8n/0/*,...))",\n  "p2sh_p2wsh_deriv": "m/48h/1h/0h/1h",\n  "p2sh_p2wsh": "Upub5T4XUooQzDXL58NCHk8ZCw9BsRSLCtnyHeZEExAq1XdnBFXiXVrHFuvvmh3TnCR7XmKHxkwqdACv68z7QKT1vwru9L1SZSsw8B2fuBvtSa6",\n  "p2sh_p2wsh_desc": "sh(wsh(sortedmulti(M,[0F056943/48h/1h/0h/1h]tpubDF2rnouQaaYrUEy2JM1YD3RFzew4onawGM4X2Re67gguTf5CbHonBRiFGe3Xjz7DK88dxBFGf2i7K1hef3PM4cFKyUjcbJXddaY9F5tJBoP/0/*,...)))",\n  "p2wsh_deriv": "m/48h/1h/0h/2h",\n  "p2wsh": "Vpub5mtnnUUL8u4oyRf5d2NZJqDypgmpx8FontedpqxNyjXTi6fLp8fmpp2wedS6UyuNpDgLDoVH23c6rYpFSEfB9jhdbD8gek2stjxhwJeE1Eq",\n  "p2wsh_desc": "wsh(sortedmulti(M,[0F056943/48h/1h/0h/2h]tpubDF2rnouQaaYrXF4noGTv6rQYmx87cQ4GrUdhpvXkhtChwQPbdGTi8GA88NUaSrwZBwNsTkC9bFkkC8vDyGBVVAQTZ2AS6gs68RQXtXcCvkP/0/*,...))",\n  "account": "0",\n  "xfp": "0F056943"\n}'
    ]

    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    for part in parts:
        meta_data_handler.add(part)
    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()
    assert data.data_type == DataType.SignerInfos, "Wrong type"
    # bdk returns '  instead of h  (which sparrrow does), so the checksum is different
    assert (
        data.data_as_string()
        == '{"chain": "XRT", "xfp": "0F056943", "p2sh": {"xpub": "tpubD8NXmKsmWp3a3DXhbihAYbYLGaRNVdTnr6JoSxxfXYQcmwVtW2hv8QoDwng6JtEonmJoL3cNEwfd2cLXMpGezwZ2vL2dQ7259bueNKj9C8n", "deriv": "m/45h", "first": null, "name": "p2sh"}, "p2sh_p2wsh": {"xpub": "tpubDF2rnouQaaYrUEy2JM1YD3RFzew4onawGM4X2Re67gguTf5CbHonBRiFGe3Xjz7DK88dxBFGf2i7K1hef3PM4cFKyUjcbJXddaY9F5tJBoP", "deriv": "m/48h/1h/0h/1h", "first": null, "name": "p2sh_p2wsh"}, "p2wsh": {"xpub": "tpubDF2rnouQaaYrXF4noGTv6rQYmx87cQ4GrUdhpvXkhtChwQPbdGTi8GA88NUaSrwZBwNsTkC9bFkkC8vDyGBVVAQTZ2AS6gs68RQXtXcCvkP", "deriv": "m/48h/1h/0h/2h", "first": null, "name": "p2wsh"}}'
    )


def test_multisig_signer_infos_coldcard_qr_wrong_network():
    parts = [
        '{\n  "p2sh_deriv": "m/45h",\n  "p2sh": "tpubD8NXmKsmWp3a3DXhbihAYbYLGaRNVdTnr6JoSxxfXYQcmwVtW2hv8QoDwng6JtEonmJoL3cNEwfd2cLXMpGezwZ2vL2dQ7259bueNKj9C8n",\n  "p2sh_desc": "sh(sortedmulti(M,[0F056943/45h]tpubD8NXmKsmWp3a3DXhbihAYbYLGaRNVdTnr6JoSxxfXYQcmwVtW2hv8QoDwng6JtEonmJoL3cNEwfd2cLXMpGezwZ2vL2dQ7259bueNKj9C8n/0/*,...))",\n  "p2sh_p2wsh_deriv": "m/48h/1h/0h/1h",\n  "p2sh_p2wsh": "Upub5T4XUooQzDXL58NCHk8ZCw9BsRSLCtnyHeZEExAq1XdnBFXiXVrHFuvvmh3TnCR7XmKHxkwqdACv68z7QKT1vwru9L1SZSsw8B2fuBvtSa6",\n  "p2sh_p2wsh_desc": "sh(wsh(sortedmulti(M,[0F056943/48h/1h/0h/1h]tpubDF2rnouQaaYrUEy2JM1YD3RFzew4onawGM4X2Re67gguTf5CbHonBRiFGe3Xjz7DK88dxBFGf2i7K1hef3PM4cFKyUjcbJXddaY9F5tJBoP/0/*,...)))",\n  "p2wsh_deriv": "m/48h/1h/0h/2h",\n  "p2wsh": "Vpub5mtnnUUL8u4oyRf5d2NZJqDypgmpx8FontedpqxNyjXTi6fLp8fmpp2wedS6UyuNpDgLDoVH23c6rYpFSEfB9jhdbD8gek2stjxhwJeE1Eq",\n  "p2wsh_desc": "wsh(sortedmulti(M,[0F056943/48h/1h/0h/2h]tpubDF2rnouQaaYrXF4noGTv6rQYmx87cQ4GrUdhpvXkhtChwQPbdGTi8GA88NUaSrwZBwNsTkC9bFkkC8vDyGBVVAQTZ2AS6gs68RQXtXcCvkP/0/*,...))",\n  "account": "0",\n  "xfp": "0F056943"\n}'
    ]

    meta_data_handler = UnifiedDecoder(bdk.Network.BITCOIN)
    for part in parts:
        meta_data_handler.add(part)

    with pytest.raises(WrongNetwork) as exc_info:
        assert meta_data_handler.is_complete()
        meta_data_handler.get_complete_data()
    assert (
        str(exc_info.value)
        == "tpubD8NXmKsmWp3a3DXhbihAYbYLGaRNVdTnr6JoSxxfXYQcmwVtW2hv8QoDwng6JtEonmJoL3cNEwfd2cLXMpGezwZ2vL2dQ7259bueNKj9C8n doesnt start with xpub, which is required for Network.BITCOIN"
    )

    # and now test that also an xpub cannot be entered in the test network
    parts = [
        '{\n  "p2sh_deriv": "m/45h",\n  "p2sh": "xpub6C6nQwHaWbSrzs5tZ1q7m5R9cPK9eYpNMFesiXsYrgc1P8bvLLAet9JfHjYXKjToD8cBRswJXXbbFpXgwsswVPAZzKMa1jUp2kVkGVUaJa7",\n  "p2sh_desc": "sh(sortedmulti(M,[0F056943/45h]xpub6C6nQwHaWbSrzs5tZ1q7m5R9cPK9eYpNMFesiXsYrgc1P8bvLLAet9JfHjYXKjToD8cBRswJXXbbFpXgwsswVPAZzKMa1jUp2kVkGVUaJa7/0/*,...))",\n  "account": "0",\n  "xfp": "0F056943"\n}'
    ]

    meta_data_handler = UnifiedDecoder(bdk.Network.TESTNET)
    for part in parts:
        meta_data_handler.add(part)

    with pytest.raises(WrongNetwork) as exc_info:
        assert meta_data_handler.is_complete()
        meta_data_handler.get_complete_data()
    assert (
        str(exc_info.value)
        == "xpub6C6nQwHaWbSrzs5tZ1q7m5R9cPK9eYpNMFesiXsYrgc1P8bvLLAet9JfHjYXKjToD8cBRswJXXbbFpXgwsswVPAZzKMa1jUp2kVkGVUaJa7 doesnt start with tpub, which is required for Network.TESTNET"
    )


def test_ur_passport_multisig_sparrow_signer_info():
    s = '{\n  "p2sh_deriv": "m/45\'",\n  "p2sh": "tpubD9Mz5aj9ECe3FhVj1DPmDnr7BaJdmT9qEsHJB5dMH4oxkNJcGpxUJc7GZmSLJwcbkD6YHSNoqtChe88GYspc7nLgsLvvebn6NJsPP4tBriN",\n  "p2wsh_p2sh_deriv": "m/48\'/1\'/0\'/1\'",\n  "p2wsh_p2sh": "Upub5TRrjLzSsQ1y4Y66eyKFoeLGp7SnHmKDrDM8eAStCd6h9KyeiECLnkMXSCEF6ngAPxiK33rApfKr9wUkhc9q59p7vTy6HQC5NdqLnj6T9Fs",\n  "p2wsh_deriv": "m/48\'/1\'/0\'/2\'",\n  "p2wsh": "Vpub5nG831fN25ZSxj9QNAuGdaiuK6ydVAhLboUny8iayYhHvpb8pFrS611ahsQNMLaqu2e3ZhZAmVhSPkeav8QiwNzLFBQc2z9DgEfFWkFAqCm",\n  "xfp": "95CA6ECC"\n}\n'

    data = Data.from_str(s, network=bdk.Network.TESTNET)
    assert data.data_type == DataType.SignerInfos
    # check conversion to tpub
    assert (
        data.data[1].xpub
        == "tpubDFQC3M6STm3VTegvfaCEokcLwLwWtf7BpurRRdv9Jn9pRjX8n29qiG8qw9EK4aNGBKXf2U9brXq3NpCHxL6ACpCYkchGKFqmt3Lp8YJbpW6"
    )
    assert data.data[1].key_origin == "m/48h/1h/0h/1h"
    assert data.data[1].fingerprint == "95CA6ECC"


def test_ur_passport_single_sig_signer_infos():
    parts = [
        "UR:BYTES/1830-38/LPCFATDSCSDSCFATDMCYEOJEINBDHDEHFZBWJEECESFEBWFXDAFWAODEEMASKSAXBNFRGTHEEHAHFSGHDYCNCWDEGODPDNKGHEKTCYAHAEHEIEIOKBGDBWEEBGJNKSJSJSFWAEGSFL",
        "UR:BYTES/1830-38/LPCFATDSCSDSCFATDMCYEOJEINBDHDEHFZBWJEECESFEBWFXDAFWAODEEMASKSAXBNFRGTHEEHAHFSGHDYCNCWDEGODPDNKGHEKTCYAHAEHEIEIOKBGDBWEEBGJNKSJSJSFWAEGSFL",
        "UR:BYTES/1831-38/LPCFATDICSDSCFATDMCYEOJEINBDHDEHIHGAGSFWDLDWBKGEENHYGACFHKGYAHDRCXCTKPHTADHYAOCFGUCMBYDYBAJKHYDRFXBWEYGTKSFYDKEMDKDSCHBBIHDMCYCTGUFXHKLPKN",
        "UR:BYTES/1832-38/LPCFATDECSDSCFATDMCYEOJEINBDHDEHJTEYFWJEJTIOHFEYFWFPFYIOCPDWCXCPIYINJPJKJYCPFTCXJTKPJZJZDWCXCPIEIHJPINKOCPFTCXCPJNDLEEETDIDLDYDIDLFMUTMUFM",
        "UR:BYTES/1832-38/LPCFATDECSDSCFATDMCYEOJEINBDHDEHJTEYFWJEJTIOHFEYFWFPFYIOCPDWCXCPIYINJPJKJYCPFTCXJTKPJZJZDWCXCPIEIHJPINKOCPFTCXCPJNDLEEETDIDLDYDIDLFMUTMUFM",
        "UR:BYTES/1833-38/LPCFATDTCSDSCFATDMCYEOJEINBDHDEHASFSHTDRBYCLGYDPIEHDFEDWAXIAAAASCTDKCNDYJKFRIDAHHDETCTGYIAHNASKBDMKBFHBTDRJNJKDSIYFGBKDAHFCAETEOGHLBWTIDWS",
        "UR:BYTES/1833-38/LPCFATDTCSDSCFATDMCYEOJEINBDHDEHASFSHTDRBYCLGYDPIEHDFEDWAXIAAAASCTDKCNDYJKFRIDAHHDETCTGYIAHNASKBDMKBFHBTDRJNJKDSIYFGBKDAHFCAETEOGHLBWTIDWS",
        "UR:BYTES/1834-38/LPCFATDRCSDSCFATDMCYEOJEINBDHDEHDPJNBBCMFTDIKKDTIMINFLHDEHADCXBWJSDWBNBZDMBNHLDRCWEEJTBSBWIEDRJEGHDYFEAXKBCXDAGTFDFMCNDWHFDPAMDWASLPCLHGSA",
        "UR:BYTES/1834-38/LPCFATDRCSDSCFATDMCYEOJEINBDHDEHDPJNBBCMFTDIKKDTIMINFLHDEHADCXBWJSDWBNBZDMBNHLDRCWEEJTBSBWIEDRJEGHDYFEAXKBCXDAGTFDFMCNDWHFDPAMDWASLPCLHGSA",
        "UR:BYTES/1835-38/LPCFATDNCSDSCFATDMCYEOJEINBDHDEHAYFDCHGWHEGAJSIMCXISCNCEBAEMJLIEHYKODKGWAHAYCMDKKBCHCHGOKBBKEOJSBSDYBKIAJOFSCMHYINGHDYGLIDKECWASEMBZYLVTRH",
        "UR:BYTES/1835-38/LPCFATDNCSDSCFATDMCYEOJEINBDHDEHAYFDCHGWHEGAJSIMCXISCNCEBAEMJLIEHYKODKGWAHAYCMDKKBCHCHGOKBBKEOJSBSDYBKIAJOFSCMHYINGHDYGLIDKECWASEMBZYLVTRH",
        "UR:BYTES/1836-38/LPCFATDWCSDSCFATDMCYEOJEINBDHDEHIYINJPJKJYCPFTCXCPEOETENJYGLIEHSECJTGYKSJYJKKNJEGTIMIHFLGYIYJLKTHGKOFYJPGTESGLGDGOENFLCPDWCXCPIEIHEMGHBSNL",
        "UR:BYTES/1836-38/LPCFATDWCSDSCFATDMCYEOJEINBDHDEHIYINJPJKJYCPFTCXCPEOETENJYGLIEHSECJTGYKSJYJKKNJEGTIMIHFLGYIYJLKTHGKOFYJPGTESGLGDGOENFLCPDWCXCPIEIHEMGHBSNL",
        "UR:BYTES/1836-38/LPCFATDWCSDSCFATDMCYEOJEINBDHDEHIYINJPJKJYCPFTCXCPEOETENJYGLIEHSECJTGYKSJYJKKNJEGTIMIHFLGYIYJLKTHGKOFYJPGTESGLGDGOENFLCPDWCXCPIEIHEMGHBSNL",
        "UR:BYTES/1837-38/LPCFATDPCSDSCFATDMCYEOJEINBDHDEHGYGWFNEEKIEHADCTFWGECFFNDWGWCTBYFNFZBGKBFDJSHPGUFHIYFEEMCAGSKIGAHGHTKKEHCNKSJZDSHHEOFXDSHTDKDWHYFELATAWKWE",
        "UR:BYTES/1837-38/LPCFATDPCSDSCFATDMCYEOJEINBDHDEHGYGWFNEEKIEHADCTFWGECFFNDWGWCTBYFNFZBGKBFDJSHPGUFHIYFEEMCAGSKIGAHGHTKKEHCNKSJZDSHHEOFXDSHTDKDWHYFELATAWKWE",
        "UR:BYTES/1838-38/LPCFATDMCSDSCFATDMCYEOJEINBDHDEHJOEYJKISDPJOEYKTJOJEISCPDWCXCPHEJOKPIDCPFTCXCPKKJOKPIDENHDEMFXGTFWGYISHFJYKPFWKSKPKNGMJLENFDINGSHSHLBZBZLD",
        "UR:BYTES/1838-38/LPCFATDMCSDSCFATDMCYEOJEINBDHDEHJOEYJKISDPJOEYKTJOJEISCPDWCXCPHEJOKPIDCPFTCXCPKKJOKPIDENHDEMFXGTFWGYISHFJYKPFWKSKPKNGMJLENFDINGSHSHLBZBZLD",
        "UR:BYTES/1839-38/LPCFATDLCSDSCFATDMCYEOJEINBDHDEHFXIDESKPHFGREHEEJEIEETIOIYENGTIYHTJTHFIYKNGHIECPDWCXCPIYINJPJKJYCPFTCXCPEHGTHDGOISJSEMFXECGEFPIEIOPLURQDGO",
        "UR:BYTES/1839-38/LPCFATDLCSDSCFATDMCYEOJEINBDHDEHFXIDESKPHFGREHEEJEIEETIOIYENGTIYHTJTHFIYKNGHIECPDWCXCPIYINJPJKJYCPFTCXCPEHGTHDGOISJSEMFXECGEFPIEIOPLURQDGO",
        "UR:BYTES/1840-38/LPCFATDYCSDSCFATDMCYEOJEINBDHDEHJZDSDEDSGYJSAHECKPDWGLDKKNFXFDFTAODTHGKIFNBDDSDNDPGUGLJYFXEYFEFNCXDEIHKKIEETHSJLINJOFZKTAXESKSFPHECSWLYAHL",
        "UR:BYTES/1840-38/LPCFATDYCSDSCFATDMCYEOJEINBDHDEHJZDSDEDSGYJSAHECKPDWGLDKKNFXFDFTAODTHGKIFNBDDSDNDPGUGLJYFXEYFEFNCXDEIHKKIEETHSJLINJOFZKTAXESKSFPHECSWLYAHL",
        "UR:BYTES/1841-38/LPCFATEHCSDSCFATDMCYEOJEINBDHDEHFSJZDPFMKKCACMGYAEJKATGLCEEOCFBKIDIHHNBZCXHFJYAECXASHGHGJNCKHTCNDYGUKBBSCFDMHLBWBELBBAKPASCTCFINFYMETORHND",
        "UR:BYTES/1841-38/LPCFATEHCSDSCFATDMCYEOJEINBDHDEHFSJZDPFMKKCACMGYAEJKATGLCEEOCFBKIDIHHNBZCXHFJYAECXASHGHGJNCKHTCNDYGUKBBSCFDMHLBWBELBBAKPASCTCFINFYMETORHND",
        "UR:BYTES/1842-38/LPCFATEYCSDSCFATDMCYEOJEINBDHDEHDSIHAACYASJEJKHTAACMDIENDRAOHEKGGABTGABTHHHDGDDRETKSBNHPIYFZAACADIDMDKEMCHGUCNDMJTFWFNKPFYGLFWJTDPGOGLCATT",
        "UR:BYTES/1843-38/LPCFATEOCSDSCFATDMCYEOJEINBDHDEHIDFLHFKKJPFYIEHSIYGOHYAXEOFTBGKICPEECACHKBBDBDEEHEIHHEFZHHAADTDSEOJYDAKKEYCKADJTHHIEHHFPDSCPHSGEBDLTFRBEKI",
        "UR:BYTES/1843-38/LPCFATEOCSDSCFATDMCYEOJEINBDHDEHIDFLHFKKJPFYIEHSIYGOHYAXEOFTBGKICPEECACHKBBDBDEEHEIHHEFZHHAADTDSEOJYDAKKEYCKADJTHHIEHHFPDSCPHSGEBDLTFRBEKI",
        "UR:BYTES/1844-38/LPCFATEECSDSCFATDMCYEOJEINBDHDEHDKKICXKEHDBWKGIEGUJOCFGUHLFNHGBEDABWHYKNCHCKKTEYJSDMJEBGAAHYGMKSCHGYFPLBKBFDHKIOJSETFNHFEHKEENBYHPGOAEMYBG",
        "UR:BYTES/1844-38/LPCFATEECSDSCFATDMCYEOJEINBDHDEHDKKICXKEHDBWKGIEGUJOCFGUHLFNHGBEDABWHYKNCHCKKTEYJSDMJEBGAAHYGMKSCHGYFPLBKBFDHKIOJSETFNHFEHKEENBYHPGOAEMYBG",
        "UR:BYTES/1845-38/LPCFATECCSDSCFATDMCYEOJEINBDHDEHESFGINHFEYEYIAKKFLEMEYGOKTFEGTFXGDKNHSGEKTJPJOFYJOEYHKETHTJEFDGDJTIHFLGOJTHDECEYETJYFXHDIAJNFPEMJOFLTKBEKI",
        "UR:BYTES/1845-38/LPCFATECCSDSCFATDMCYEOJEINBDHDEHESFGINHFEYEYIAKKFLEMEYGOKTFEGTFXGDKNHSGEKTJPJOFYJOEYHKETHTJEFDGDJTIHFLGOJTHDECEYETJYFXHDIAJNFPEMJOFLTKBEKI",
        "UR:BYTES/1846-38/LPCFATENCSDSCFATDMCYEOJEINBDHDEHJEHPKOASENADBYFXFLBZHDDTBAJNAYKEHLAOGSAYBWFRATGUGUCPGUDWBWJKFPDKJLCNKPJOCSGLINCMKBKEBYBBEMKNIEHSJPWMBGDADT",
        "UR:BYTES/1846-38/LPCFATENCSDSCFATDMCYEOJEINBDHDEHJEHPKOASENADBYFXFLBZHDDTBAJNAYKEHLAOGSAYBWFRATGUGUCPGUDWBWJKFPDKJLCNKPJOCSGLINCMKBKEBYBBEMKNIEHSJPWMBGDADT",
        "UR:BYTES/1847-38/LPCFATEMCSDSCFATDMCYEOJEINBDHDEHIHGSKOFPJLGTIOJOEEFGEMKTKPFPFGIOIYGEKOIHENIAFPHSIYJLGUIHGRKKETGMKKFXIDJSIDESJKJLHKGEIAFWESGMHTIHKNVECTJNBN",
        "UR:BYTES/1847-38/LPCFATEMCSDSCFATDMCYEOJEINBDHDEHIHGSKOFPJLGTIOJOEEFGEMKTKPFPFGIOIYGEKOIHENIAFPHSIYJLGUIHGRKKETGMKKFXIDJSIDESJKJLHKGEIAFWESGMHTIHKNVECTJNBN",
        "UR:BYTES/1848-38/LPCFATETCSDSCFATDMCYEOJEINBDHDEHIYJOCPFTCXCPFWEYEOEEETFXFEFYCPDWCXCPJTHSJNIHCPFTCXCPJOEYKTJKISCPDWCXCPHEJOKPIDCPFTCXCPHTJOKPIDEMECMDYNHNPA",
        "UR:BYTES/1848-38/LPCFATETCSDSCFATDMCYEOJEINBDHDEHIYJOCPFTCXCPFWEYEOEEETFXFEFYCPDWCXCPJTHSJNIHCPFTCXCPJOEYKTJKISCPDWCXCPHEJOKPIDCPFTCXCPHTJOKPIDEMECMDYNHNPA",
        "UR:BYTES/1849-38/LPCFATESCSDSCFATDMCYEOJEINBDHDEHCPAECYHFJNGHFPETIYDREYFSIHAMJKFXBZBNHTCMDLEYCAFMCNGWDMDLBGCFFLLBCWGMGRFHKPJTFYHFFEJNJZASHLGUJOKKGWFWKIKTSG",
        "UR:BYTES/1849-38/LPCFATESCSDSCFATDMCYEOJEINBDHDEHCPAECYHFJNGHFPETIYDREYFSIHAMJKFXBZBNHTCMDLEYCAFMCNGWDMDLBGCFFLLBCWGMGRFHKPJTFYHFFEJNJZASHLGUJOKKGWFWKIKTSG",
        "UR:BYTES/1850-38/LPCFATFTCSDSCFATDMCYEOJEINBDHDEHHDEOCNCKHKFLBGENGHCECLCYHTKGKIDIGWHYFYHLDSAMCKDIGDKODIFWFDDPBAGEESHFJZFSJYAOCSAXEMIEBBCTAYCTDNFMEMDMBDDEWS",
        "UR:BYTES/1851-38/LPCFATFRCSDSCFATDMCYEOJEINBDHDEHKGCAHPBBDIFZHNDTAMCPGUHHDSGEADEYFEBAAOBZKIHNCFDEKOJLEYESCWKEJSFEIHFZEMCWASGOAMFPGOKNCXFWATEHHYIHLBCHHYMWQD",
        "UR:BYTES/1851-38/LPCFATFRCSDSCFATDMCYEOJEINBDHDEHKGCAHPBBDIFZHNDTAMCPGUHHDSGEADEYFEBAAOBZKIHNCFDEKOJLEYESCWKEJSFEIHFZEMCWASGOAMFPGOKNCXFWATEHHYIHLBCHHYMWQD",
        "UR:BYTES/1852-38/LPCFATFNCSDSCFATDMCYEOJEINBDHDEHASJPHTHHGOFZFYGUGMGYBNGMGWFWHDEMCKFMGRHGGSCHEHCSBYBBBZGDISHNCWKTJOKPJOIEHDGYGSIAJYCSKOBYGOHLJPIECHKPYACWGO",
        "UR:BYTES/1852-38/LPCFATFNCSDSCFATDMCYEOJEINBDHDEHASJPHTHHGOFZFYGUGMGYBNGMGWFWHDEMCKFMGRHGGSCHEHCSBYBBBZGDISHNCWKTJOKPJOIEHDGYGSIAJYCSKOBYGOHLJPIECHKPYACWGO",
        "UR:BYTES/1852-38/LPCFATFNCSDSCFATDMCYEOJEINBDHDEHASJPHTHHGOFZFYGUGMGYBNGMGWFWHDEMCKFMGRHGGSCHEHCSBYBBBZGDISHNCWKTJOKPJOIEHDGYGSIAJYCSKOBYGOHLJPIECHKPYACWGO",
        "UR:BYTES/1853-38/LPCFATFSCSDSCFATDMCYEOJEINBDHDEHKECWIMAEGEHPEEAYGMBTETCXDPIHFLKOCHGWGDDRIDASDAKPENFYBBFWEMEMAADMEHCKJZAEKSGOAOCSAAGRKBKSCTIMDMECHGUTPSGOCY",
        "UR:BYTES/1853-38/LPCFATFSCSDSCFATDMCYEOJEINBDHDEHKECWIMAEGEHPEEAYGMBTETCXDPIHFLKOCHGWGDDRIDASDAKPENFYBBFWEMEMAADMEHCKJZAEKSGOAOCSAAGRKBKSCTIMDMECHGUTPSGOCY",
        "UR:BYTES/1854-38/LPCFATFMCSDSCFATDMCYEOJEINBDHDEHHTIMGSCWFWIMBKKBCYGHJZIOBKEMHFDMATGRHYFLKNGSKIGYKNFSBACWHLBTFTCKKTGSGADWHGDTIEKOLBFLDMBTEHDTAOENHNIADACWYK",
        "UR:BYTES/1854-38/LPCFATFMCSDSCFATDMCYEOJEINBDHDEHHTIMGSCWFWIMBKKBCYGHJZIOBKEMHFDMATGRHYFLKNGSKIGYKNFSBACWHLBTFTCKKTGSGADWHGDTIEKOLBFLDMBTEHDTAOENHNIADACWYK",
        "UR:BYTES/1855-38/LPCFATFHCSDSCFATDMCYEOJEINBDHDEHGAHEJSGTIHBGGRFNGHKTGSKTKTAHGHFNHSGEBZGTJZDAFEECKNDEKPGMFSAOHKBWJKHYBAFWGWJEETIAAAINEEHHBACTEYDKBZPTVELFHD",
        "UR:BYTES/1855-38/LPCFATFHCSDSCFATDMCYEOJEINBDHDEHGAHEJSGTIHBGGRFNGHKTGSKTKTAHGHFNHSGEBZGTJZDAFEECKNDEKPGMFSAOHKBWJKHYBAFWGWJEETIAAAINEEHHBACTEYDKBZPTVELFHD",
        "UR:BYTES/1856-38/LPCFATFZCSDSCFATDMCYEOJEINBDHDEHGRDLCTJYAYBGFPBBISAXBDJPHDKPIMJZHNHLFXIYHGGDAYCPAEBEIACSKSDEKGBGHKHLJOBWHPKNCFBGCYCYCPECAMGWKGCHGMROTILRDM",
        "UR:BYTES/1856-38/LPCFATFZCSDSCFATDMCYEOJEINBDHDEHGRDLCTJYAYBGFPBBISAXBDJPHDKPIMJZHNHLFXIYHGGDAYCPAEBEIACSKSDEKGBGHKHLJOBWHPKNCFBGCYCYCPECAMGWKGCHGMROTILRDM",
        "UR:BYTES/1857-38/LPCFATFPCSDSCFATDMCYEOJEINBDHDEHJNAAHSBADYAACMCYBBDMBBJEKGKODTAXETFNGMDREOJEHGFECSKSFYDYECJKBDCNKOJKISBGBGAAIHEHDYCKGUBNHPDMFPJZGTWTHGKKLB",
        "UR:BYTES/1858-38/LPCFATFWCSDSCFATDMCYEOJEINBDHDEHEEHSENEOIMJKIMHSKKKSKPJSIHENIEGEGLEEGOEOJYEMIAIHESJKKNEOJYFXHDGUJKGDEMFPGEGRIDJKJLHSECKKEMKOIHIDFDSTRPFDQZ",
        "UR:BYTES/1859-38/LPCFATFXCSDSCFATDMCYEOJEINBDHDEHEYDKDSIOHPEEDMCWIMDYIAASDMGAJZCWDNEHDNBECMIYDRBNKPHKBNAHHKETINCPEEGSBNDWFTHLCTGUFHDLBDBYINGYGMCHKKTLTKSWEH",
        "UR:BYTES/1860-38/LPCFATFYCSDSCFATDMCYEOJEINBDHDEHHYCKIDHLCXFWCMJKBWKKIHAEBYFHCEDECHIHJOETAOKGHFBKFWKODPJSHYKTIEBWEOIDDNIAIOECHSJPDNFTDIETJOJEKNJLKPOXDKYLGA",
        "UR:BYTES/1861-38/LPCFATFECSDSCFATDMCYEOJEINBDHDEHCLKGGMEMGUKIFPFWCNJSATJKCFAHESFDGUEEBZEYIHFNKBHNBZHPIOCEFXBDKIDSFGFLCYFHJPHPDTEHHFBKFYCXENBNJNHKJEIEEYCHPS",
        "UR:BYTES/1861-38/LPCFATFECSDSCFATDMCYEOJEINBDHDEHCLKGGMEMGUKIFPFWCNJSATJKCFAHESFDGUEEBZEYIHFNKBHNBZHPIOCEFXBDKIDSFGFLCYFHJPHPDTEHHFBKFYCXENBNJNHKJEIEEYCHPS",
        "UR:BYTES/1862-38/LPCFATFGCSDSCFATDMCYEOJEINBDHDEHKGCPKSJOKPIDCPFTCXCPKSJOKPIDENFWJPGMIOKTJTJKGHIMKSIDEMIMFDFWKOHDFYGTHGGRISKOIAGUGUEMFYENKTJSGMFGJLDEESSESG",
        "UR:BYTES/1862-38/LPCFATFGCSDSCFATDMCYEOJEINBDHDEHKGCPKSJOKPIDCPFTCXCPKSJOKPIDENFWJPGMIOKTJTJKGHIMKSIDEMIMFDFWKOHDFYGTHGGRISKOIAGUGUEMFYENKTJSGMFGJLDEESSESG",
        "UR:BYTES/1863-38/LPCFATFLCSDSCFATDMCYEOJEINBDHDEHJPGDCPDWCXCPIYINJPJKJYCPFTCXJTKPJZJZDWCXCPIEIHJPINKOCPFTCXCPJNDLEEETDIDLDYDIDLDYDIDLEYDICPDWCXCPKSKTTNWKKP",
        "UR:BYTES/1863-38/LPCFATFLCSDSCFATDMCYEOJEINBDHDEHJPGDCPDWCXCPIYINJPJKJYCPFTCXJTKPJZJZDWCXCPIEIHJPINKOCPFTCXCPJNDLEEETDIDLDYDIDLDYDIDLEYDICPDWCXCPKSKTTNWKKP",
        "UR:BYTES/1864-38/LPCFATFDCSDSCFATDMCYEOJEINBDHDEHKNJOKPIDENJSKSKOJEKKECJSINHGKSJOKSIHIAJPENJEKNHFEOGYHFEYGYIDGLETKTJOIOHSKPHGFPGEJYIAFPJSGSENJLHFKKDKBZFGZM",
        "UR:BYTES/1864-38/LPCFATFDCSDSCFATDMCYEOJEINBDHDEHKNJOKPIDENJSKSKOJEKKECJSINHGKSJOKSIHIAJPENJEKNHFEOGYHFEYGYIDGLETKTJOIOHSKPHGFPGEJYIAFPJSGSENJLHFKKDKBZFGZM",
        "UR:BYTES/1865-38/LPCFATGACSDSCFATDMCYEOJEINBDHDEHHKJYHDFYIHGDJSCPKIDWCXCPIAISHSINJTCPFTCXCPFWGHFXCPDWCXCPIDINJOEEETHEEHCPFTCXKGCPKSJOKPIDCPFTCXCPKSPMMWYAEN",
        "UR:BYTES/1865-38/LPCFATGACSDSCFATDMCYEOJEINBDHDEHHKJYHDFYIHGDJSCPKIDWCXCPIAISHSINJTCPFTCXCPFWGHFXCPDWCXCPIDINJOEEETHEEHCPFTCXKGCPKSJOKPIDCPFTCXCPKSPMMWYAEN",
        "UR:BYTES/1866-38/LPCFATGECSDSCFATDMCYEOJEINBDHDEHHFFGJODEDMINJTCSISJTFMDADMDPAMEMHHCYDPAYINKPBDFWAHJSJOIAGAGDHSDNLBAHCADIDECMIDBKHTEYGMKBGTKGBGHKEOCSVOPKPK",
        "UR:BYTES/1866-38/LPCFATGECSDSCFATDMCYEOJEINBDHDEHHFFGJODEDMINJTCSISJTFMDADMDPAMEMHHCYDPAYINKPBDFWAHJSJOIAGAGDHSDNLBAHCADIDECMIDBKHTEYGMKBGTKGBGHKEOCSVOPKPK",
        "UR:BYTES/1867-38/LPCFATGRCSDSCFATDMCYEOJEINBDHDEHHSIAIAJLKPJTJYCPFTCXDYDWCXCPIDINJOEEESCPFTCXKGCPKSJOKPIDCPFTCXCPKSJOKPIDENFXFLKTEOHGIMJTGTFYGTINEMRTFYSGWS",
        "UR:BYTES/1867-38/LPCFATGRCSDSCFATDMCYEOJEINBDHDEHHSIAIAJLKPJTJYCPFTCXDYDWCXCPIDINJOEEESCPFTCXKGCPKSJOKPIDCPFTCXCPKSJOKPIDENFXFLKTEOHGIMJTGTFYGTINEMRTFYSGWS",
        "UR:BYTES/1868-38/LPCFATGSCSDSCFATDMCYEOJEINBDHDEHJPISIMFGEEKOJSENECHKJYEYHTJYHTIDFXIMKPCPDWCXCPIYINJPJKJYCPFTCXCPIDIAEHJSIOJPJNJOIEKTKNJOIAJOISJPKNCAZSTOSB",
        "UR:BYTES/1868-38/LPCFATGSCSDSCFATDMCYEOJEINBDHDEHJPISIMFGEEKOJSENECHKJYEYHTJYHTIDFXIMKPCPDWCXCPIYINJPJKJYCPFTCXCPIDIAEHJSIOJPJNJOIEKTKNJOIAJOISJPKNCAZSTOSB",
        "UR:BYTES/1868-38/LPCFATGSCSDSCFATDMCYEOJEINBDHDEHJPISIMFGEEKOJSENECHKJYEYHTJYHTIDFXIMKPCPDWCXCPIYINJPJKJYCPFTCXCPIDIAEHJSIOJPJNJOIEKTKNJOIAJOISJPKNCAZSTOSB",
        "UR:BYTES/1869-38/LPCFATGTCSDSCFATDMCYEOJEINBDHDEHECJZCEKSEHAEHNCKDLBEGRBAFTDWDAGHGUHDKEKEGHDPFSGOFYJPCSCTLBAMJLBTEECYJOCKKPJEBAFRGUIAHFEEGYGEIEFRHGNTFDFRPD",
        "UR:BYTES/1869-38/LPCFATGTCSDSCFATDMCYEOJEINBDHDEHECJZCEKSEHAEHNCKDLBEGRBAFTDWDAGHGUHDKEKEGHDPFSGOFYJPCSCTLBAMJLBTEECYJOCKKPJEBAFRGUIAHFEEGYGEIEFRHGNTFDFRPD",
        "UR:BYTES/1870-38/LPCFATGLCSDSCFATDMCYEOJEINBDHDEHIELBKTEOKSJKHNBGKSKIFMKOHYDTHLEOHSDNBEIECNKPIHCTFYCWBYAHEYJYGEDIAOKGBSEOCYBNIYIMCFHSDKINFZJNJLGEJZGWTLISIE",
        "UR:BYTES/1870-38/LPCFATGLCSDSCFATDMCYEOJEINBDHDEHIELBKTEOKSJKHNBGKSKIFMKOHYDTHLEOHSDNBEIECNKPIHCTFYCWBYAHEYJYGEDIAOKGBSEOCYBNIYIMCFHSDKINFZJNJLGEJZGWTLISIE",
        "UR:BYTES/1871-38/LPCFATGWCSDSCFATDMCYEOJEINBDHDEHJSATENFEDLDYJNCAGHKSIOBBCMGWDWFXGRJTKNCMDKDEDPGYISFMHPIMAMKNGLHLJTCPGRHGFNAYDLDRDPDYGUBZDYKBFPIACXLPRKSGTS",
        "UR:BYTES/1871-38/LPCFATGWCSDSCFATDMCYEOJEINBDHDEHJSATENFEDLDYJNCAGHKSIOBBCMGWDWFXGRJTKNCMDKDEDPGYISFMHPIMAMKNGLHLJTCPGRHGFNAYDLDRDPDYGUBZDYKBFPIACXLPRKSGTS",
        "UR:BYTES/1872-38/LPCFATGDCSDSCFATDMCYEOJEINBDHDEHIYFLISIDECEOKNJSHNIHDSATATCFHNIOKODTFLINEEKOFEEMGWEMHLDTGDAXJZCSCHKEEHJKDAFXKOKBKTKKCXFZDAKSFYIDBSTITESPFR",
        "UR:BYTES/1872-38/LPCFATGDCSDSCFATDMCYEOJEINBDHDEHIYFLISIDECEOKNJSHNIHDSATATCFHNIOKODTFLINEEKOFEEMGWEMHLDTGDAXJZCSCHKEEHJKDAFXKOKBKTKKCXFZDAKSFYIDBSTITESPFR",
        "UR:BYTES/1873-38/LPCFATGYCSDSCFATDMCYEOJEINBDHDEHDPDAFHGOJLBYGYIACEHNLBBZGLGWCPHKHTCWJOEOHSCLKGGDGOAXISCPECGHFPCXGOGDFWFGGWAMKTIABNFEKKINFEENCAJLJOINRYCWFP",
        "UR:BYTES/1873-38/LPCFATGYCSDSCFATDMCYEOJEINBDHDEHDPDAFHGOJLBYGYIACEHNLBBZGLGWCPHKHTCWJOEOHSCLKGGDGOAXISCPECGHFPCXGOGDFWFGGWAMKTIABNFEKKINFEENCAJLJOINRYCWFP",
        "UR:BYTES/1874-38/LPCFATGMCSDSCFATDMCYEOJEINBDHDEHFGBEHTEODPATAAGEDAFNFGFYKPCXBWFYKSHNCTCNESBDCTDKDKFWAOGYENHDFNJNIYAXCEBKCNFEHDGMFGCEAEESDYJYJOGUADRTCTTTFN",
        "UR:BYTES/1874-38/LPCFATGMCSDSCFATDMCYEOJEINBDHDEHFGBEHTEODPATAAGEDAFNFGFYKPCXBWFYKSHNCTCNESBDCTDKDKFWAOGYENHDFNJNIYAXCEBKCNFEHDGMFGCEAEESDYJYJOGUADRTCTTTFN",
        "UR:BYTES/1875-38/LPCFATGUCSDSCFATDMCYEOJEINBDHDEHHNAYHKJPGRDPAYEECSBTDWCWDYHDDLFNCTDEFNFHFMFEJZDLFNGEGHEYIYIYKSEEKSGUGHGMJLEEKOIOIEIEJLGEFLKKGDKNIMAYMEUYSB",
        "UR:BYTES/1875-38/LPCFATGUCSDSCFATDMCYEOJEINBDHDEHHNAYHKJPGRDPAYEECSBTDWCWDYHDDLFNCTDEFNFHFMFEJZDLFNGEGHEYIYIYKSEEKSGUGHGMJLEEKOIOIEIEJLGEFLKKGDKNIMAYMEUYSB",
        "UR:BYTES/1876-38/LPCFATGHCSDSCFATDMCYEOJEINBDHDEHDIBKIHINCYCLGWDPFRCPADAEJEDWEYKIBECEAODYFGBWDALBIOINFMKNISFGFRENFPDACLDWFSJPGOHPISFSENAAJYFHGMFGBYCPHHGHBG",
    ]

    meta_data_handler = UnifiedDecoder(bdk.Network.BITCOIN)
    for part in parts:
        meta_data_handler.add(part)
    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()

    assert data.data_type == DataType.SignerInfos

    assert [d.__dict__ for d in data.data] == [
        {
            "fingerprint": "95CA6ECC",
            "key_origin": "m/49h/0h/0h",
            "xpub": "xpub6CGw3WjnMDMi7coJxjW68VjFoGXkBbdb1ebWQtQZASZYAdpZc7VN8UnMYADdp3n2qQJC9ChckeUSYjL4rn4htS1Roc29PTWkZJekP6iDiR8",
            "derivation_path": None,
            "name": "p2sh-p2wpkh",
            "first_address": "386tNda5nQxtszkMjeGQfowWvDrM9NPU6G",
        },
        {
            "fingerprint": "95CA6ECC",
            "key_origin": "m/44h/0h/0h",
            "xpub": "xpub6BrRgwnsTjxb7jHBvXDMWKhvcSS7D6wqRFofhCWhgw3h3YXfY6s4JRPrH1wAzyG5G1V2G2jfd5v6yUmR4vFFCb9uVK14kd8gf6MfZnVfzTd",
            "derivation_path": None,
            "name": "p2pkh",
            "first_address": "1MXUhq7C5JAdgibyk67x48cUVmtzPNAaQB",
        },
        {
            "fingerprint": "95CA6ECC",
            "key_origin": "m/84h/0h/0h",
            "xpub": "xpub6CJQ9dk1R9ssG4EcS3REdEJ24f5F4ahb5H7sKpP4a63jsjayxuqe6dJN4U3t7ce9sz3tCXSsP7AJKbsoa5y7vebHrhjF4vq65Yt2ZtZbCju",
            "derivation_path": None,
            "name": "p2wpkh",
            "first_address": "bc1qgrmpdwzpcphrzauht53dhgtdfwh7vqt9peagqc",
        },
        {
            "fingerprint": "95CA6ECC",
            "key_origin": "m/48h/0h/0h/2h",
            "xpub": "xpub6EzEVsAwvggBeYfsqWdi4e9JFk2HWbcorybrDtiGjvhewVKmMtV41HDK311zbpWQYbWfMLiULAX32LqDZqo5bNrRyC8KKweRB23gBnDoArP",
            "derivation_path": None,
            "name": "p2wsh",
            "first_address": None,
        },
        {
            "fingerprint": "95CA6ECC",
            "key_origin": "m/48h/0h/0h/1h",
            "xpub": "xpub6EzEVsAwvggBbFWKQB1Xk5VccTZmEMkqmDDDSbZ4GFQgapeLvAoMgp4F7wuAFgfJve6cAafoSeKy8RyCbqb9soYJcB9RZezn2BkngV2BADg",
            "derivation_path": None,
            "name": "p2sh-p2wsh",
            "first_address": None,
        },
    ]
