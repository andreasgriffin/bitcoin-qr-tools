import bdkpython as bdk

from bitcoin_qr_tools.data import Data, DataType
from bitcoin_qr_tools.unified_decoder import UnifiedDecoder


def test_psbt():

    # psbt
    s = "cHNidP8BAHEBAAAAAXgQzjk+DTWQTPUtRMbYiheC0jfbipvw+jQ5lidmyABjAAAAAAD9////AgDh9QUAAAAAFgAUbBuOQOlcnz8vpruh2Kb3CFr4vlhkEQ2PAAAAABYAFN1n2hvBWYzshD42xwQzy9XYoji3BAEAAAABAKoCAAAAAAEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////BQKYAAEB/////wIA+QKVAAAAABYAFLlHwN6VXNLM381bMxmNJlaDTQzVAAAAAAAAAAAmaiSqIant4vYcP3HR3v0/qZnfo2lTdVxpBol5mWK0i+vYNpdOjPkBIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBHwD5ApUAAAAAFgAUuUfA3pVc0szfzVszGY0mVoNNDNUiBgISCnRxeOxzC0MgK01AmiIRLrgS1AyIqKeBkdwL+nt/6RikLG3TVAAAgAEAAIAAAACAAAAAAAAAAAAAACICAlQcwExiTUk9f7olLkwPlQpiregRHc9jXXFJBlMoucgNGKQsbdNUAACAAQAAgAAAAIAAAAAAAQAAAAA="
    data = Data.from_str(s, network=bdk.Network.REGTEST)
    assert data.data_type == DataType.PSBT
    assert data.data.serialize() == s

    # psbt  in hex
    s = "70736274ff01007101000000017810ce393e0d35904cf52d44c6d88a1782d237db8a9bf0fa3439962766c800630000000000fdffffff0200e1f505000000001600146c1b8e40e95c9f3f2fa6bba1d8a6f7085af8be5864110d8f00000000160014dd67da1bc1598cec843e36c70433cbd5d8a238b704010000000100aa020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff050298000101ffffffff0200f9029500000000160014b947c0de955cd2ccdfcd5b33198d2656834d0cd50000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9012000000000000000000000000000000000000000000000000000000000000000000000000001011f00f9029500000000160014b947c0de955cd2ccdfcd5b33198d2656834d0cd5220602120a747178ec730b43202b4d409a22112eb812d40c88a8a78191dc0bfa7b7fe918a42c6dd354000080010000800000008000000000000000000000220202541cc04c624d493d7fba252e4c0f950a62ade8111dcf635d7149065328b9c80d18a42c6dd3540000800100008000000080000000000100000000"
    data = Data.from_str(s, network=bdk.Network.REGTEST)
    assert data.data_type == DataType.PSBT
    assert (
        data.data.serialize()
        == "cHNidP8BAHEBAAAAAXgQzjk+DTWQTPUtRMbYiheC0jfbipvw+jQ5lidmyABjAAAAAAD9////AgDh9QUAAAAAFgAUbBuOQOlcnz8vpruh2Kb3CFr4vlhkEQ2PAAAAABYAFN1n2hvBWYzshD42xwQzy9XYoji3BAEAAAABAKoCAAAAAAEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////BQKYAAEB/////wIA+QKVAAAAABYAFLlHwN6VXNLM381bMxmNJlaDTQzVAAAAAAAAAAAmaiSqIant4vYcP3HR3v0/qZnfo2lTdVxpBol5mWK0i+vYNpdOjPkBIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBHwD5ApUAAAAAFgAUuUfA3pVc0szfzVszGY0mVoNNDNUiBgISCnRxeOxzC0MgK01AmiIRLrgS1AyIqKeBkdwL+nt/6RikLG3TVAAAgAEAAIAAAACAAAAAAAAAAAAAACICAlQcwExiTUk9f7olLkwPlQpiregRHc9jXXFJBlMoucgNGKQsbdNUAACAAQAAgAAAAIAAAAAAAQAAAAA="
    )

    # psbt  in base43
    s = "8QL7:6+K4/8G8R4H280VS:ZETHWYA8T0M0+TDB*:DO-RPJ719-L2IK:U-W03F*YY..Z*6BL:RK1/6FL6$C5WF773J1ZNXKSDX:.65$P6KFSE06:OJGR+PVSJ6AVXAU1B5KJ8UPKDRA4.FF31PGAS9CA4DTGWA9DTMCPK2.XWBVHDPG*BTNN7X7M$JKN2KP$BX0CGO.F83U.HQ4LEU4HX772U7F8T33H/M80-9-IJF-VZ+EEJO8I*8ZXITNQRX8T/2SI/:4L*-85:4QUI5DIN2:DO$GH2Y:MURO$AKD0HTWFKTG+.JUS3V++NNQTGUL1FF3N50PCQJ$R5+4DV/D*1RQ$86$0HZ-P8+T/H6I62SHZJ2T9OKXXH+M-1+/K$YXT31G3TMS8ZR9ZCLU4$V:LLMBDH*NEZA-3ES.Q$DKEZSRG3X*:909+QWR80P2KBUIY0U/K5NCQU/+G2.T*C6JPFSNRT-2I4.Z:BNIGOO.*ZT9VENQ94R55N"
    data = Data.from_str(s, network=bdk.Network.REGTEST)
    assert data.data_type == DataType.PSBT
    assert (
        data.data.serialize()
        == "cHNidP8BAHEBAAAAATJP+qyB7ficSzGPQgKBFsbRn8VHiEMn6fyNzgwuNKdlAAAAAAD9////AtutPSUAAAAAFgAUAnfYntpfXDFSWVgoxSOe2hzARdxADQMAAAAAABYAFIispas4E/PglRJIfjC+D6KTziv2pAIAAAABAR9AvkAlAAAAABYAFCwiv4G38qX3bI3ejFeBhmz/ynVEIgYCbBkqmMH7X4SHDmgztLx6BvjTf1j/qUBCjTo9yogJ5MwYfPQsjlQAAIABAACAAAAAgAEAAAAKAAAAACICAg4ln5Ey8qPfMRXwjlp2W9igSm5Qm1IMi9IaL24SoFLQGHz0LI5UAACAAQAAgAAAAIABAAAAHAAAAAAiAgI4gc65DfdDJ3bI9FMX9fwq7NgKZcY8YCHHAjRWrvPC/Rh89CyOVAAAgAEAAIAAAACAAAAAABkAAAAA"
    )

    # psbt , splitted according to specter
    def split_string_by_length(input_string, length):
        return [input_string[i : i + length] for i in range(0, len(input_string), length)]

    s = "cHNidP8BAHEBAAAAAXgQzjk+DTWQTPUtRMbYiheC0jfbipvw+jQ5lidmyABjAAAAAAD9////AgDh9QUAAAAAFgAUbBuOQOlcnz8vpruh2Kb3CFr4vlhkEQ2PAAAAABYAFN1n2hvBWYzshD42xwQzy9XYoji3BAEAAAABAKoCAAAAAAEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////BQKYAAEB/////wIA+QKVAAAAABYAFLlHwN6VXNLM381bMxmNJlaDTQzVAAAAAAAAAAAmaiSqIant4vYcP3HR3v0/qZnfo2lTdVxpBol5mWK0i+vYNpdOjPkBIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBHwD5ApUAAAAAFgAUuUfA3pVc0szfzVszGY0mVoNNDNUiBgISCnRxeOxzC0MgK01AmiIRLrgS1AyIqKeBkdwL+nt/6RikLG3TVAAAgAEAAIAAAACAAAAAAAAAAAAAACICAlQcwExiTUk9f7olLkwPlQpiregRHc9jXXFJBlMoucgNGKQsbdNUAACAAQAAgAAAAIAAAAAAAQAAAAA="
    meta_data_handler = UnifiedDecoder(bdk.Network.REGTEST)
    splitted = split_string_by_length(s, 10)
    for part in [f"p{i+1}of{len(splitted)} {s}" for i, s in enumerate(splitted)]:
        meta_data_handler.add(part)

    assert meta_data_handler.is_complete()
    data = meta_data_handler.get_complete_data()
    assert data.data_type == DataType.PSBT
    assert data.data.serialize() == s
